package checked;

import java.util.Stack;

//Given 2D matrix of 1s and 0s. Using stack, find maximum area of square made by 0s
public class MaxSquareArea {

    public static int maxSquareArea(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        // Step 1
        /**set up a heights array with a length equal to the number of columns in the matrix. Moreover,
         * we set maxArea to 0. The heights of the histogram will be stored in this array.**/
        int[] heights = new int[cols];
        int maxArea = 0;

        for (int i = 0; i < cols; i++) {
            heights[i] = matrix[0][i];
            maxArea = Math.max(maxArea, heights[i]);
        }

        /**row by row, go through the matrix. Create a histogram for each row based on the zeros in that row
         * and the heights of the preceding row's histogram. update the heights array based on the current matrix
         * member and the equivalent element in the preceding row to achieve this. The height of the histogram at
         * that index should be increased by the height of the histogram at that same index in the previous row if
         * the current matrix element is 0. If not, set the histogram's height at that index to be 0. then utilize
         * the maxHistogramArea function to determine the largest rectangle that can be created by the histogram at that index.**/
        // Step 2-3
        for (int i = 1; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.println("matrix[i][j]"+matrix[i][j]);
                if (matrix[i][j] == 0) {
                    System.out.println("1st "+heights[j]);
                    heights[j] += matrix[i - 1][j];
                    System.out.println("heights[j]"+heights[j]);
                } else {
                    heights[j] = 0;
                }
            }
            // Step 4
            maxArea = Math.max(maxArea, maxHistogramArea(heights));
        }

        // Step 5
        return maxArea;
    }

    /**The stack-based approach for the maximum area of a rectangle in a histogram is used to determine the largest rectangle
     *  that can be generated by a given histogram. keep the histogram indexes stacked in ascending height order. Each index
     *  should be pushed up the stack until it reaches a height that is lower than the height at the top. Pop the index at the
     *  top of the stack at that moment, and then determine the size of the rectangle that can be created by the height at the
     *  popped index and the distance between the current index and the index at the top of the stack.**/
    public static int maxHistogramArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;

        for (int i = 0; i <= n; i++) {
            while (!stack.isEmpty() && (i == n || heights[stack.peek()] > heights[i])) {
                int height = heights[stack.pop()];
                int width = stack.isEmpty() ? i : i - stack.peek() - 1;
                maxArea = Math.max(maxArea, height * width);
            }
            stack.push(i);
        }

        return maxArea;
    }

    public static void main(String[] args) {
        int[][] matrix = {{1, 0, 1, 0, 0},
                {0, 1, 1, 1, 1},
                {0, 0, 0, 0, 1},
                {0, 0, 0, 1, 1},
                {0, 1, 0, 0, 1}};
        int maxArea = maxSquareArea(matrix);
        System.out.println("Maximum area of square made by 0s: " + maxArea);
    }
}
